package mj.hackpsusp25;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.*;
import java.awt.*;
import com.formdev.flatlaf.FlatLightLaf; // Import FlatLaf
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.TableCellRenderer;
import static mj.hackpsusp25.SheetsInterface.getSheetsService;
import static mj.hackpsusp25.SheetsInterface.writeToSheet;

public class MainFrame extends javax.swing.JFrame {
    private ArrayList<ItemEntry> newItems = new ArrayList<ItemEntry>();
    private ArrayList<ItemEntry> subItems = new ArrayList<ItemEntry>();
    private ItemEntry orgSelected;
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        // Set FlatLaf Look and Feel
        try {
            // Use FlatLaf instead of Nimbus
            UIManager.setLookAndFeel(new FlatLightLaf());
            System.out.println("Current Look and Feel: " + UIManager.getLookAndFeel().getName());
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        int rowHeight = 70;
        
        initComponents(); // Initialize UI components
        Color Main_Background_Color = new java.awt.Color (255, 230, 215);
        Color Background_Color = new java.awt.Color (235, 230, 230);
        Main_Pannel.setBackground(Main_Background_Color);
        Base_Pannel.setBackground(Background_Color);
        Add_Pannel.setBackground(Background_Color);
        Sub_Pannel.setBackground(Background_Color);
        Org_Pannel.setBackground(Background_Color);
        Shopping_List_Pannel.setBackground(Background_Color);
                
        DefaultTableModel displayClassesTableModel = (DefaultTableModel) addTable.getModel();
        DefaultTableModel subModel = (DefaultTableModel) subTable.getModel();
        displayClassesTableModel.setRowCount(0);
        subModel.setRowCount(0);

        addTable.setRowHeight(rowHeight);  // Set the row height to 120 (adjust as needed)
        invTable.setRowHeight(rowHeight);  // Set the row height to 120 (adjust as needed)
        subTable.setRowHeight(rowHeight);
        Org_Filter_Item_Table.setRowHeight(rowHeight);
        shoppingEditTable.setRowHeight(rowHeight);
        shoppingGenTable.setRowHeight(rowHeight);
        
         popInvTable();
        
        rebuildFilterBoxes();
        
    }
    
    static class ImageRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            // Check if the value is an ImageIcon and set it to the cell
            if (value instanceof ImageIcon) {
                ImageIcon imageIcon = (ImageIcon) value;
            Image image = imageIcon.getImage(); // Get the image from the icon
            Image resizedImage = image.getScaledInstance(50, 50, Image.SCALE_SMOOTH); // Resize the image
            setIcon(new ImageIcon(resizedImage)); // Set the resized image as the icon
                setText("");                 // Optionally clear the text in the cell
            } else {
                setIcon(null);  // If not an image, clear the icon
                setText("No Image"); // Optionally show a fallback text if no image
            }

            return this;
        }
    }
    
    
    
    public void rebuildFilterBoxes(){
        ArrayList<String> filters = CategoryQueries.getAllCategories();
        filters.add(0, "None");
        invFilterCmbo.setModel(new javax.swing.DefaultComboBoxModel(filters.toArray()));
        orgFilterFilterCmbo.setModel(new javax.swing.DefaultComboBoxModel(filters.toArray()));
        orgFilterAddFilterCmbo.setModel(new javax.swing.DefaultComboBoxModel(filters.toArray()));
        orgFilterDeleteFilterCmbo.setModel(new javax.swing.DefaultComboBoxModel(filters.toArray()));
        Shopping_Edit_FilterCmbo.setModel(new javax.swing.DefaultComboBoxModel(filters.toArray()));
        Shopping_GeneratedFilterCmbo1.setModel(new javax.swing.DefaultComboBoxModel(filters.toArray()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        Main_Pannel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        But_Shopping_List = new javax.swing.JToggleButton();
        But_Inventory = new javax.swing.JToggleButton();
        But_Add = new javax.swing.JToggleButton();
        But_Sub = new javax.swing.JToggleButton();
        But_Org = new javax.swing.JToggleButton();
        Base_Pannel = new javax.swing.JPanel();
        Please_Select_Panel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Inventory_Pannel = new javax.swing.JPanel();
        Inv_Search_Lable = new javax.swing.JLabel();
        Inv_Search_Box = new javax.swing.JTextField();
        Inv_Filter_Lable = new javax.swing.JLabel();
        invFilterCmbo = new javax.swing.JComboBox<>();
        invScroll = new javax.swing.JScrollPane();
        invTable = new javax.swing.JTable();
        But_Inv_Export = new javax.swing.JButton();
        Add_Pannel = new javax.swing.JPanel();
        Add_Barcode_Lable = new javax.swing.JLabel();
        addBarcodeBox = new javax.swing.JTextField();
        Add_Table = new javax.swing.JScrollPane();
        addTable = new javax.swing.JTable();
        But_Add_Items = new javax.swing.JButton();
        Org_Pannel = new javax.swing.JPanel();
        Org_Card_Pannel = new javax.swing.JPanel();
        Org_Select_Pannel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        Org_Unpack_Pannel = new javax.swing.JPanel();
        Org_Unpack_Master_Label = new javax.swing.JLabel();
        Org_Unpack_Barcode_Input = new javax.swing.JTextField();
        Org_Unpack_Number_Label = new javax.swing.JLabel();
        But_Org_Unpack_Submit_Number = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        Org_Unpack_Table = new javax.swing.JTable();
        Org_Unpack_Number_Select = new javax.swing.JSpinner();
        Org_Customize_Pannel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        Org_Filter_Pannel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Org_Filter_Item_Table = new javax.swing.JTable();
        Org_Filter_Label1 = new javax.swing.JLabel();
        Org_Filter_Search_Label = new javax.swing.JLabel();
        Org_Filter_Search_Box = new javax.swing.JTextField();
        Org_Filter_Label2 = new javax.swing.JLabel();
        orgFilterFilterCmbo = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        Org_Filter_Filters_Table = new javax.swing.JTable();
        Org_Filter_Label4 = new javax.swing.JLabel();
        Org_Filter_Label5 = new javax.swing.JLabel();
        orgFilterAddFilterCmbo = new javax.swing.JComboBox<>();
        But_Add_Filter = new javax.swing.JButton();
        Org_Filter_Label6 = new javax.swing.JLabel();
        Create_Filter_Text_Box = new javax.swing.JTextField();
        But_Org_Filter_Remove_Filter_Item = new javax.swing.JButton();
        But_Org_Filter_Remove_Filter_System = new javax.swing.JButton();
        Org_Filter_Label7 = new javax.swing.JLabel();
        orgFilterDeleteFilterCmbo = new javax.swing.JComboBox<>();
        Org_Filter_Label8 = new javax.swing.JLabel();
        But_Org_Customize_Toggle = new javax.swing.JToggleButton();
        But_Org_Filter_Toggle = new javax.swing.JToggleButton();
        But_Org_Unpack_Toggle = new javax.swing.JToggleButton();
        Sub_Pannel = new javax.swing.JPanel();
        Sub_Barcode_Lable = new javax.swing.JLabel();
        subBarcodeBox = new javax.swing.JTextField();
        Sub_Table = new javax.swing.JScrollPane();
        subTable = new javax.swing.JTable();
        But_Remove_Items = new javax.swing.JButton();
        Shopping_List_Pannel = new javax.swing.JPanel();
        But_Shopping_List_Edit = new javax.swing.JToggleButton();
        But_Shopping_List_Generate = new javax.swing.JToggleButton();
        Shopping_List_Card_Pannel = new javax.swing.JPanel();
        Shopping_Select_Pannel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        Shopping_List_Generate_Pannel = new javax.swing.JPanel();
        Shopping_Generated_Table = new javax.swing.JScrollPane();
        shoppingGenTable = new javax.swing.JTable();
        Shopping_Generated_Search_Lable = new javax.swing.JLabel();
        Shopping_Generated_Search_Box = new javax.swing.JTextField();
        Shopping_Generated_Filter_Lable1 = new javax.swing.JLabel();
        Shopping_GeneratedFilterCmbo1 = new javax.swing.JComboBox<>();
        Shopping_List_Edit_Pannel = new javax.swing.JPanel();
        Shopping_Edit_Table = new javax.swing.JScrollPane();
        shoppingEditTable = new javax.swing.JTable();
        Shopping_Edit_Search_Label = new javax.swing.JLabel();
        Shopping_Edit_Search_Box = new javax.swing.JTextField();
        Shopping_Edit_Filter_Label = new javax.swing.JLabel();
        Shopping_Edit_FilterCmbo = new javax.swing.JComboBox<>();
        shopSaveBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 500));
        setResizable(false);

        Main_Pannel.setBackground(new java.awt.Color(237, 235, 234));
        Main_Pannel.setForeground(new java.awt.Color(220, 220, 220));
        Main_Pannel.setMaximumSize(new java.awt.Dimension(800, 500));
        Main_Pannel.setMinimumSize(new java.awt.Dimension(800, 500));
        Main_Pannel.setPreferredSize(new java.awt.Dimension(800, 500));
        Main_Pannel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setBackground(new java.awt.Color(204, 255, 255));
        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 34)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(30, 41, 49));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("HOME INVENTORY MANAGMENT SYSTEM");
        Main_Pannel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 60));

        buttonGroup1.add(But_Shopping_List);
        But_Shopping_List.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        But_Shopping_List.setText("Shopping List");
        But_Shopping_List.setBorderPainted(false);
        But_Shopping_List.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                But_Shopping_ListActionPerformed(evt);
            }
        });
        Main_Pannel.add(But_Shopping_List, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 60, 170, 50));

        buttonGroup1.add(But_Inventory);
        But_Inventory.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        But_Inventory.setText("Inventory");
        But_Inventory.setBorderPainted(false);
        But_Inventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                But_InventoryActionPerformed(evt);
            }
        });
        Main_Pannel.add(But_Inventory, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 130, 50));

        buttonGroup1.add(But_Add);
        But_Add.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        But_Add.setText("Add");
        But_Add.setBorderPainted(false);
        But_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                But_AddActionPerformed(evt);
            }
        });
        Main_Pannel.add(But_Add, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 60, 120, 50));

        buttonGroup1.add(But_Sub);
        But_Sub.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        But_Sub.setText("Subtract");
        But_Sub.setBorderPainted(false);
        But_Sub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                But_SubActionPerformed(evt);
            }
        });
        Main_Pannel.add(But_Sub, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 60, 120, 50));

        buttonGroup1.add(But_Org);
        But_Org.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        But_Org.setText("Organize");
        But_Org.setBorderPainted(false);
        But_Org.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                But_OrgActionPerformed(evt);
            }
        });
        Main_Pannel.add(But_Org, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 60, 140, 50));

        Base_Pannel.setMaximumSize(new java.awt.Dimension(800, 370));
        Base_Pannel.setMinimumSize(new java.awt.Dimension(800, 370));
        Base_Pannel.setPreferredSize(new java.awt.Dimension(800, 370));
        Base_Pannel.setRequestFocusEnabled(false);
        Base_Pannel.setLayout(new java.awt.CardLayout());

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 48)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Please Select A Menu");

        javax.swing.GroupLayout Please_Select_PanelLayout = new javax.swing.GroupLayout(Please_Select_Panel);
        Please_Select_Panel.setLayout(Please_Select_PanelLayout);
        Please_Select_PanelLayout.setHorizontalGroup(
            Please_Select_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        Please_Select_PanelLayout.setVerticalGroup(
            Please_Select_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
        );

        Base_Pannel.add(Please_Select_Panel, "card7");

        Inventory_Pannel.setMaximumSize(new java.awt.Dimension(800, 370));
        Inventory_Pannel.setMinimumSize(new java.awt.Dimension(800, 370));
        Inventory_Pannel.setPreferredSize(new java.awt.Dimension(800, 370));

        Inv_Search_Lable.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        Inv_Search_Lable.setText("Search: ");

        Inv_Search_Box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Inv_Search_BoxActionPerformed(evt);
            }
        });
        Inv_Search_Box.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Inv_Search_BoxKeyPressed(evt);
            }
        });

        Inv_Filter_Lable.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        Inv_Filter_Lable.setText("Filters: ");

        invFilterCmbo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        invFilterCmbo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invFilterCmboActionPerformed(evt);
            }
        });

        invTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Image", "Name", "Quantity", "Filters"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        invScroll.setViewportView(invTable);

        But_Inv_Export.setBackground(new java.awt.Color(204, 255, 204));
        But_Inv_Export.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        But_Inv_Export.setText("Export");
        But_Inv_Export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                But_Inv_ExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Inventory_PannelLayout = new javax.swing.GroupLayout(Inventory_Pannel);
        Inventory_Pannel.setLayout(Inventory_PannelLayout);
        Inventory_PannelLayout.setHorizontalGroup(
            Inventory_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Inventory_PannelLayout.createSequentialGroup()
                .addGroup(Inventory_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(Inventory_PannelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Inv_Search_Lable, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Inv_Search_Box, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(81, 81, 81)
                        .addComponent(Inv_Filter_Lable, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(invFilterCmbo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(But_Inv_Export, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41))
                    .addComponent(invScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        Inventory_PannelLayout.setVerticalGroup(
            Inventory_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Inventory_PannelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Inventory_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(Inv_Search_Box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Inv_Search_Lable)
                    .addComponent(Inv_Filter_Lable)
                    .addComponent(invFilterCmbo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(But_Inv_Export))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(invScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE))
        );

        Base_Pannel.add(Inventory_Pannel, "card2");

        Add_Pannel.setMaximumSize(new java.awt.Dimension(800, 370));
        Add_Pannel.setMinimumSize(new java.awt.Dimension(800, 370));
        Add_Pannel.setPreferredSize(new java.awt.Dimension(800, 370));

        Add_Barcode_Lable.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        Add_Barcode_Lable.setText("Barcode: ");

        addBarcodeBox.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        addBarcodeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBarcodeBoxActionPerformed(evt);
            }
        });

        addTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Image", "Name", "Quantity", "Filters"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        addTable.setMaximumSize(new java.awt.Dimension(800, 330));
        Add_Table.setViewportView(addTable);

        But_Add_Items.setBackground(new java.awt.Color(204, 255, 204));
        But_Add_Items.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        But_Add_Items.setText("ADD ITEMS");
        But_Add_Items.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                But_Add_ItemsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Add_PannelLayout = new javax.swing.GroupLayout(Add_Pannel);
        Add_Pannel.setLayout(Add_PannelLayout);
        Add_PannelLayout.setHorizontalGroup(
            Add_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Add_PannelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(Add_Barcode_Lable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addBarcodeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(But_Add_Items, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(283, Short.MAX_VALUE))
            .addComponent(Add_Table)
        );
        Add_PannelLayout.setVerticalGroup(
            Add_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Add_PannelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Add_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(But_Add_Items)
                    .addComponent(addBarcodeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Add_Barcode_Lable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Add_Table, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE))
        );

        Base_Pannel.add(Add_Pannel, "card3");

        Org_Pannel.setMaximumSize(new java.awt.Dimension(800, 370));
        Org_Pannel.setMinimumSize(new java.awt.Dimension(800, 370));
        Org_Pannel.setPreferredSize(new java.awt.Dimension(800, 370));
        Org_Pannel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Org_Card_Pannel.setMaximumSize(new java.awt.Dimension(800, 290));
        Org_Card_Pannel.setMinimumSize(new java.awt.Dimension(800, 290));
        Org_Card_Pannel.setPreferredSize(new java.awt.Dimension(800, 290));
        Org_Card_Pannel.setLayout(new java.awt.CardLayout());

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 48)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Please Select Sub Menu");

        javax.swing.GroupLayout Org_Select_PannelLayout = new javax.swing.GroupLayout(Org_Select_Pannel);
        Org_Select_Pannel.setLayout(Org_Select_PannelLayout);
        Org_Select_PannelLayout.setHorizontalGroup(
            Org_Select_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        Org_Select_PannelLayout.setVerticalGroup(
            Org_Select_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
        );

        Org_Card_Pannel.add(Org_Select_Pannel, "card5");

        Org_Unpack_Master_Label.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        Org_Unpack_Master_Label.setText("Master Barcode: ");

        Org_Unpack_Barcode_Input.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N

        Org_Unpack_Number_Label.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        Org_Unpack_Number_Label.setText("Number Of Items Inside:");

        But_Org_Unpack_Submit_Number.setBackground(new java.awt.Color(204, 255, 204));
        But_Org_Unpack_Submit_Number.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        But_Org_Unpack_Submit_Number.setText("Submit");

        Org_Unpack_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Image", "Name", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Org_Unpack_Table.setMaximumSize(new java.awt.Dimension(800, 200));
        Org_Unpack_Table.setMinimumSize(new java.awt.Dimension(800, 200));
        Org_Unpack_Table.setPreferredSize(new java.awt.Dimension(800, 200));
        jScrollPane3.setViewportView(Org_Unpack_Table);

        javax.swing.GroupLayout Org_Unpack_PannelLayout = new javax.swing.GroupLayout(Org_Unpack_Pannel);
        Org_Unpack_Pannel.setLayout(Org_Unpack_PannelLayout);
        Org_Unpack_PannelLayout.setHorizontalGroup(
            Org_Unpack_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Org_Unpack_PannelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Org_Unpack_Master_Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Org_Unpack_Barcode_Input, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(Org_Unpack_Number_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Org_Unpack_Number_Select, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(But_Org_Unpack_Submit_Number, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(153, 153, 153))
            .addGroup(Org_Unpack_PannelLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        Org_Unpack_PannelLayout.setVerticalGroup(
            Org_Unpack_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Org_Unpack_PannelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(Org_Unpack_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(Org_Unpack_Master_Label)
                    .addComponent(Org_Unpack_Barcode_Input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Org_Unpack_Number_Label)
                    .addComponent(Org_Unpack_Number_Select, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(But_Org_Unpack_Submit_Number))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Org_Card_Pannel.add(Org_Unpack_Pannel, "card3");

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 48)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("To Be Implimented");

        javax.swing.GroupLayout Org_Customize_PannelLayout = new javax.swing.GroupLayout(Org_Customize_Pannel);
        Org_Customize_Pannel.setLayout(Org_Customize_PannelLayout);
        Org_Customize_PannelLayout.setHorizontalGroup(
            Org_Customize_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        Org_Customize_PannelLayout.setVerticalGroup(
            Org_Customize_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Org_Customize_PannelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Org_Card_Pannel.add(Org_Customize_Pannel, "card4");

        Org_Filter_Pannel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Org_Filter_Item_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Image", "Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Org_Filter_Item_Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Org_Filter_Item_TableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Org_Filter_Item_Table);

        Org_Filter_Pannel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 61, 380, 230));

        Org_Filter_Label1.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        Org_Filter_Label1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Org_Filter_Label1.setText("1 - Select an item");
        Org_Filter_Label1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Org_Filter_Pannel.add(Org_Filter_Label1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 390, 20));

        Org_Filter_Search_Label.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        Org_Filter_Search_Label.setText("Search: ");
        Org_Filter_Pannel.add(Org_Filter_Search_Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        Org_Filter_Search_Box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Org_Filter_Search_BoxActionPerformed(evt);
            }
        });
        Org_Filter_Search_Box.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Org_Filter_Search_BoxKeyPressed(evt);
            }
        });
        Org_Filter_Pannel.add(Org_Filter_Search_Box, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, 160, -1));

        Org_Filter_Label2.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        Org_Filter_Label2.setText("Filters: ");
        Org_Filter_Pannel.add(Org_Filter_Label2, new org.netbeans.lib.awtextra.AbsoluteConstraints(244, 30, 60, -1));

        orgFilterFilterCmbo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        orgFilterFilterCmbo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orgFilterFilterCmboActionPerformed(evt);
            }
        });
        Org_Filter_Pannel.add(orgFilterFilterCmbo, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 30, -1, -1));

        Org_Filter_Filters_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Filter Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(Org_Filter_Filters_Table);

        Org_Filter_Pannel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 90, 200, 200));

        Org_Filter_Label4.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        Org_Filter_Label4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Org_Filter_Label4.setText("2. Add/Delete Filters From Item");
        Org_Filter_Label4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Org_Filter_Pannel.add(Org_Filter_Label4, new org.netbeans.lib.awtextra.AbsoluteConstraints(389, 0, 410, -1));

        Org_Filter_Label5.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        Org_Filter_Label5.setText("Select Filter To Add:");
        Org_Filter_Pannel.add(Org_Filter_Label5, new org.netbeans.lib.awtextra.AbsoluteConstraints(392, 30, 160, -1));

        orgFilterAddFilterCmbo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Org_Filter_Pannel.add(orgFilterAddFilterCmbo, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 30, -1, -1));

        But_Add_Filter.setBackground(new java.awt.Color(204, 255, 204));
        But_Add_Filter.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        But_Add_Filter.setText("Add Filter To Item");
        But_Add_Filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                But_Add_FilterActionPerformed(evt);
            }
        });
        Org_Filter_Pannel.add(But_Add_Filter, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 90, 180, 30));

        Org_Filter_Label6.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        Org_Filter_Label6.setText("Create New Filter:");
        Org_Filter_Pannel.add(Org_Filter_Label6, new org.netbeans.lib.awtextra.AbsoluteConstraints(392, 60, 160, -1));
        Org_Filter_Pannel.add(Create_Filter_Text_Box, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 60, 150, -1));

        But_Org_Filter_Remove_Filter_Item.setBackground(new java.awt.Color(255, 204, 204));
        But_Org_Filter_Remove_Filter_Item.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        But_Org_Filter_Remove_Filter_Item.setText("Remove Filter From Item");
        But_Org_Filter_Remove_Filter_Item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                But_Org_Filter_Remove_Filter_ItemActionPerformed(evt);
            }
        });
        Org_Filter_Pannel.add(But_Org_Filter_Remove_Filter_Item, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 130, 180, 30));

        But_Org_Filter_Remove_Filter_System.setBackground(new java.awt.Color(255, 102, 102));
        But_Org_Filter_Remove_Filter_System.setFont(new java.awt.Font("SansSerif", 1, 10)); // NOI18N
        But_Org_Filter_Remove_Filter_System.setText("Remove Filter From System");
        But_Org_Filter_Remove_Filter_System.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                But_Org_Filter_Remove_Filter_SystemActionPerformed(evt);
            }
        });
        Org_Filter_Pannel.add(But_Org_Filter_Remove_Filter_System, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 260, 180, 30));

        Org_Filter_Label7.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        Org_Filter_Label7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Org_Filter_Label7.setText("3. Delete Filters From System");
        Org_Filter_Label7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Org_Filter_Pannel.add(Org_Filter_Label7, new org.netbeans.lib.awtextra.AbsoluteConstraints(452, 396, 541, -1));

        orgFilterDeleteFilterCmbo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Org_Filter_Pannel.add(orgFilterDeleteFilterCmbo, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 230, 130, 20));

        Org_Filter_Label8.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        Org_Filter_Label8.setText("Select Filter To Delete:");
        Org_Filter_Pannel.add(Org_Filter_Label8, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 200, 200, -1));

        Org_Card_Pannel.add(Org_Filter_Pannel, "card2");

        Org_Pannel.add(Org_Card_Pannel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 800, 330));

        buttonGroup3.add(But_Org_Customize_Toggle);
        But_Org_Customize_Toggle.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        But_Org_Customize_Toggle.setText("Customize UI");
        But_Org_Customize_Toggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                But_Org_Customize_ToggleActionPerformed(evt);
            }
        });
        Org_Pannel.add(But_Org_Customize_Toggle, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 10, 160, 20));

        buttonGroup3.add(But_Org_Filter_Toggle);
        But_Org_Filter_Toggle.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        But_Org_Filter_Toggle.setText("Edit Filters");
        But_Org_Filter_Toggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                But_Org_Filter_ToggleActionPerformed(evt);
            }
        });
        Org_Pannel.add(But_Org_Filter_Toggle, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, 170, 20));

        buttonGroup3.add(But_Org_Unpack_Toggle);
        But_Org_Unpack_Toggle.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        But_Org_Unpack_Toggle.setText("Unpack Items");
        But_Org_Unpack_Toggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                But_Org_Unpack_ToggleActionPerformed(evt);
            }
        });
        Org_Pannel.add(But_Org_Unpack_Toggle, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, 170, 20));

        Base_Pannel.add(Org_Pannel, "card5");

        Sub_Pannel.setMaximumSize(new java.awt.Dimension(800, 370));
        Sub_Pannel.setMinimumSize(new java.awt.Dimension(800, 370));
        Sub_Pannel.setPreferredSize(new java.awt.Dimension(800, 370));

        Sub_Barcode_Lable.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        Sub_Barcode_Lable.setText("Barcode: ");

        subBarcodeBox.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        subBarcodeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subBarcodeBoxActionPerformed(evt);
            }
        });

        subTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Image", "Name", "Quantity", "Filters"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Sub_Table.setViewportView(subTable);

        But_Remove_Items.setBackground(new java.awt.Color(255, 204, 204));
        But_Remove_Items.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        But_Remove_Items.setText("REMOVE ITEMS");
        But_Remove_Items.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                But_Remove_ItemsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Sub_PannelLayout = new javax.swing.GroupLayout(Sub_Pannel);
        Sub_Pannel.setLayout(Sub_PannelLayout);
        Sub_PannelLayout.setHorizontalGroup(
            Sub_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Sub_PannelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(Sub_Barcode_Lable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(subBarcodeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(But_Remove_Items)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(Sub_PannelLayout.createSequentialGroup()
                .addComponent(Sub_Table, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        Sub_PannelLayout.setVerticalGroup(
            Sub_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Sub_PannelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Sub_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(But_Remove_Items)
                    .addComponent(subBarcodeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Sub_Barcode_Lable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Sub_Table, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE))
        );

        Base_Pannel.add(Sub_Pannel, "card6");

        Shopping_List_Pannel.setMaximumSize(new java.awt.Dimension(800, 370));
        Shopping_List_Pannel.setMinimumSize(new java.awt.Dimension(800, 370));
        Shopping_List_Pannel.setPreferredSize(new java.awt.Dimension(800, 370));

        buttonGroup2.add(But_Shopping_List_Edit);
        But_Shopping_List_Edit.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        But_Shopping_List_Edit.setText("Edit");
        But_Shopping_List_Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                But_Shopping_List_EditActionPerformed(evt);
            }
        });

        buttonGroup2.add(But_Shopping_List_Generate);
        But_Shopping_List_Generate.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        But_Shopping_List_Generate.setText("Generate");
        But_Shopping_List_Generate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                But_Shopping_List_GenerateActionPerformed(evt);
            }
        });

        Shopping_List_Card_Pannel.setPreferredSize(new java.awt.Dimension(800, 332));
        Shopping_List_Card_Pannel.setLayout(new java.awt.CardLayout());

        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 48)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Please Select Sub Menu");

        javax.swing.GroupLayout Shopping_Select_PannelLayout = new javax.swing.GroupLayout(Shopping_Select_Pannel);
        Shopping_Select_Pannel.setLayout(Shopping_Select_PannelLayout);
        Shopping_Select_PannelLayout.setHorizontalGroup(
            Shopping_Select_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        Shopping_Select_PannelLayout.setVerticalGroup(
            Shopping_Select_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
        );

        Shopping_List_Card_Pannel.add(Shopping_Select_Pannel, "card4");

        Shopping_List_Generate_Pannel.setBackground(new java.awt.Color(204, 204, 204));
        Shopping_List_Generate_Pannel.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        Shopping_List_Generate_Pannel.setMaximumSize(new java.awt.Dimension(800, 332));
        Shopping_List_Generate_Pannel.setMinimumSize(new java.awt.Dimension(800, 332));
        Shopping_List_Generate_Pannel.setPreferredSize(new java.awt.Dimension(800, 332));

        shoppingGenTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Image", "Name", "Filters", "Number Needed"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Shopping_Generated_Table.setViewportView(shoppingGenTable);

        Shopping_Generated_Search_Lable.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        Shopping_Generated_Search_Lable.setText("Search: ");

        Shopping_Generated_Search_Box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Shopping_Generated_Search_BoxActionPerformed(evt);
            }
        });
        Shopping_Generated_Search_Box.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Shopping_Generated_Search_BoxKeyPressed(evt);
            }
        });

        Shopping_Generated_Filter_Lable1.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        Shopping_Generated_Filter_Lable1.setText("Filters: ");

        Shopping_GeneratedFilterCmbo1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Shopping_GeneratedFilterCmbo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Shopping_GeneratedFilterCmbo1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Shopping_List_Generate_PannelLayout = new javax.swing.GroupLayout(Shopping_List_Generate_Pannel);
        Shopping_List_Generate_Pannel.setLayout(Shopping_List_Generate_PannelLayout);
        Shopping_List_Generate_PannelLayout.setHorizontalGroup(
            Shopping_List_Generate_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Shopping_List_Generate_PannelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(Shopping_Generated_Search_Lable, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Shopping_Generated_Search_Box, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81)
                .addComponent(Shopping_Generated_Filter_Lable1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Shopping_GeneratedFilterCmbo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(292, Short.MAX_VALUE))
            .addGroup(Shopping_List_Generate_PannelLayout.createSequentialGroup()
                .addComponent(Shopping_Generated_Table, javax.swing.GroupLayout.PREFERRED_SIZE, 785, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        Shopping_List_Generate_PannelLayout.setVerticalGroup(
            Shopping_List_Generate_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Shopping_List_Generate_PannelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Shopping_List_Generate_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Shopping_Generated_Search_Lable)
                    .addComponent(Shopping_Generated_Search_Box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Shopping_Generated_Filter_Lable1)
                    .addComponent(Shopping_GeneratedFilterCmbo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Shopping_Generated_Table, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(118, 118, 118))
        );

        Shopping_List_Card_Pannel.add(Shopping_List_Generate_Pannel, "card3");

        Shopping_List_Edit_Pannel.setBackground(new java.awt.Color(204, 204, 204));
        Shopping_List_Edit_Pannel.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        Shopping_List_Edit_Pannel.setMaximumSize(new java.awt.Dimension(800, 332));
        Shopping_List_Edit_Pannel.setMinimumSize(new java.awt.Dimension(800, 332));

        shoppingEditTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Image", "Name", "Filters", "Desired Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Shopping_Edit_Table.setViewportView(shoppingEditTable);

        Shopping_Edit_Search_Label.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        Shopping_Edit_Search_Label.setText("Search: ");

        Shopping_Edit_Search_Box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Shopping_Edit_Search_BoxActionPerformed(evt);
            }
        });
        Shopping_Edit_Search_Box.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Shopping_Edit_Search_BoxKeyPressed(evt);
            }
        });

        Shopping_Edit_Filter_Label.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        Shopping_Edit_Filter_Label.setText("Filters: ");

        Shopping_Edit_FilterCmbo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Shopping_Edit_FilterCmbo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Shopping_Edit_FilterCmboActionPerformed(evt);
            }
        });

        shopSaveBtn.setBackground(new java.awt.Color(204, 255, 204));
        shopSaveBtn.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        shopSaveBtn.setText("Save");
        shopSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shopSaveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Shopping_List_Edit_PannelLayout = new javax.swing.GroupLayout(Shopping_List_Edit_Pannel);
        Shopping_List_Edit_Pannel.setLayout(Shopping_List_Edit_PannelLayout);
        Shopping_List_Edit_PannelLayout.setHorizontalGroup(
            Shopping_List_Edit_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Shopping_List_Edit_PannelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(Shopping_Edit_Search_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Shopping_Edit_Search_Box, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81)
                .addComponent(Shopping_Edit_Filter_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Shopping_Edit_FilterCmbo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80)
                .addComponent(shopSaveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(Shopping_List_Edit_PannelLayout.createSequentialGroup()
                .addComponent(Shopping_Edit_Table, javax.swing.GroupLayout.PREFERRED_SIZE, 785, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 15, Short.MAX_VALUE))
        );
        Shopping_List_Edit_PannelLayout.setVerticalGroup(
            Shopping_List_Edit_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Shopping_List_Edit_PannelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Shopping_List_Edit_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(Shopping_Edit_Search_Label)
                    .addComponent(Shopping_Edit_Search_Box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Shopping_Edit_Filter_Label)
                    .addComponent(Shopping_Edit_FilterCmbo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(shopSaveBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Shopping_Edit_Table, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE))
        );

        Shopping_List_Card_Pannel.add(Shopping_List_Edit_Pannel, "card2");

        javax.swing.GroupLayout Shopping_List_PannelLayout = new javax.swing.GroupLayout(Shopping_List_Pannel);
        Shopping_List_Pannel.setLayout(Shopping_List_PannelLayout);
        Shopping_List_PannelLayout.setHorizontalGroup(
            Shopping_List_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Shopping_List_PannelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(But_Shopping_List_Generate, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addComponent(But_Shopping_List_Edit, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(Shopping_List_PannelLayout.createSequentialGroup()
                .addComponent(Shopping_List_Card_Pannel, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        Shopping_List_PannelLayout.setVerticalGroup(
            Shopping_List_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Shopping_List_PannelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Shopping_List_PannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(But_Shopping_List_Generate)
                    .addComponent(But_Shopping_List_Edit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Shopping_List_Card_Pannel, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Base_Pannel.add(Shopping_List_Pannel, "card6");

        Main_Pannel.add(Base_Pannel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 130, 800, 370));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Main_Pannel, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Main_Pannel, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void But_Shopping_ListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_But_Shopping_ListActionPerformed
        Add_Pannel.setVisible(false);
        Sub_Pannel.setVisible(false);
        Org_Pannel.setVisible(false);
        Please_Select_Panel.setVisible(false);
        Shopping_List_Pannel.setVisible(true);
        Inventory_Pannel.setVisible(false);
    }//GEN-LAST:event_But_Shopping_ListActionPerformed

    private void But_InventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_But_InventoryActionPerformed
        Add_Pannel.setVisible(false);
        Sub_Pannel.setVisible(false);
        Org_Pannel.setVisible(false);
        Please_Select_Panel.setVisible(false);
        Shopping_List_Pannel.setVisible(false);
        Inventory_Pannel.setVisible(true);
        
        popInvTable();

        
    }//GEN-LAST:event_But_InventoryActionPerformed

    private void But_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_But_AddActionPerformed
        Add_Pannel.setVisible(true);
        Sub_Pannel.setVisible(false);
        Please_Select_Panel.setVisible(false);
        Org_Pannel.setVisible(false);
        Shopping_List_Pannel.setVisible(false);
        Inventory_Pannel.setVisible(false);
    }//GEN-LAST:event_But_AddActionPerformed

    private void But_SubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_But_SubActionPerformed
        Add_Pannel.setVisible(false);
        Sub_Pannel.setVisible(true);
        Org_Pannel.setVisible(false);
        Please_Select_Panel.setVisible(false);
        Shopping_List_Pannel.setVisible(false);
        Inventory_Pannel.setVisible(false);
    }//GEN-LAST:event_But_SubActionPerformed

    private void Inv_Search_BoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Inv_Search_BoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Inv_Search_BoxActionPerformed

    private void addBarcodeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBarcodeBoxActionPerformed
        String barcode = addBarcodeBox.getText();
        DefaultTableModel displayClassesTableModel = (DefaultTableModel) addTable.getModel();

        try{
            ItemEntry item = BarcodeInterface.getProduct(barcode); 
            boolean itemExists = false;
            
            for(int i=0; i<newItems.size(); i++){
                if(newItems.get(i).getBarcode().equals(barcode)){ //old item, so add quantity
                    itemExists = true;
                    newItems.get(i).setQuantity(newItems.get(i).getQuantity()+1);
                    displayClassesTableModel.setValueAt(newItems.get(i).getQuantity(), i, 2);
                }
            }
            
            if(!itemExists && item!=null){ //new item
                newItems.add(item);
                Object[] rowData = new Object[4];
                
                try {
                    // Load the image from the URL or file path
                    URL imageUrl = new URL(item.getImageUrl()); // Assuming getImageUrl() returns a valid URL
                    ImageIcon imageIcon = new ImageIcon(imageUrl);
                    rowData[0] = imageIcon;  // Set the ImageIcon in rowData[0]
                } catch (Exception e) {
                    rowData[0] = null; // In case the image URL is invalid or there's an error
                    e.printStackTrace();
                }
                
                rowData[1] = item.getName();
                rowData[2] = item.getQuantity();
                ArrayList<String> cats = ItemQueries.getCategoriesForItem(item.getBarcode());
                String str = "";
                for(String s: cats){
                    str+=s+" ";
                }
                rowData[3] = str;
                        
                displayClassesTableModel.addRow(rowData);
            }
            
            
            addTable.getColumnModel().getColumn(0).setCellRenderer(new ImageRenderer());
            
            addBarcodeBox.setText("");
            
        } catch(Exception e){
        
        }
    }//GEN-LAST:event_addBarcodeBoxActionPerformed

    private void But_OrgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_But_OrgActionPerformed
        Add_Pannel.setVisible(false);
        Sub_Pannel.setVisible(false);
        Org_Pannel.setVisible(true);
        Please_Select_Panel.setVisible(false);
        Shopping_List_Pannel.setVisible(false);
        Inventory_Pannel.setVisible(false);
        popOrgItemTable(ItemQueries.getAllItems());
        
    }//GEN-LAST:event_But_OrgActionPerformed

    private void popOrgItemTable(ArrayList<ItemEntry> items){
         DefaultTableModel displayClassesTableModel = (DefaultTableModel) Org_Filter_Item_Table.getModel();
         displayClassesTableModel.setRowCount(0);
         
         for(ItemEntry i: items){
            Object[] rowData = new Object[2];
            try {
                    // Load the image from the URL or file path
                    URL imageUrl = new URL(i.getImageUrl()); // Assuming getImageUrl() returns a valid URL
                    ImageIcon imageIcon = new ImageIcon(imageUrl);
                    rowData[0] = imageIcon;  // Set the ImageIcon in rowData[0]
                } catch (Exception e) {
                    rowData[0] = null; // In case the image URL is invalid or there's an error
                    e.printStackTrace();
                }
            
            rowData[1] = i.getName();
            displayClassesTableModel.addRow(rowData);
         }
         Org_Filter_Item_Table.getColumnModel().getColumn(0).setCellRenderer(new ImageRenderer());
         
    }
    class SpinnerEditor extends AbstractCellEditor implements TableCellEditor {
    private final JSpinner spinner;

    public SpinnerEditor() {
        spinner = new JSpinner(new SpinnerNumberModel(1, 0, 100, 1)); // min 0, max 100, step 1
    }

    @Override
    public Object getCellEditorValue() {
        return spinner.getValue();
    }

    @Override
    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
        spinner.setValue(value);
        return spinner;
    }
}

// Spinner Renderer (For Displaying the Spinner)
class SpinnerRenderer extends JSpinner implements TableCellRenderer {
    public SpinnerRenderer() {
        super(new SpinnerNumberModel(1, 0, 100, 1)); // min 0, max 100, step 1
        setOpaque(true);
    }

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        setValue(value);
        return this;
    }
}
    private void But_Shopping_List_EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_But_Shopping_List_EditActionPerformed
    Shopping_List_Edit_Pannel.setVisible(true);
    Shopping_List_Generate_Pannel.setVisible(false);
    Shopping_Select_Pannel.setVisible(false);
    popShopEditTable();
    }//GEN-LAST:event_But_Shopping_List_EditActionPerformed
    
    private void But_Shopping_List_GenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_But_Shopping_List_GenerateActionPerformed
        Shopping_List_Edit_Pannel.setVisible(false);
        Shopping_Select_Pannel.setVisible(false);
        Shopping_List_Generate_Pannel.setVisible(true);
        popShopGenTable();
    }//GEN-LAST:event_But_Shopping_List_GenerateActionPerformed

    private void Shopping_Edit_Search_BoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Shopping_Edit_Search_BoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Shopping_Edit_Search_BoxActionPerformed

    private void subBarcodeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subBarcodeBoxActionPerformed
        String barcode = subBarcodeBox.getText();
        DefaultTableModel displayClassesTableModel = (DefaultTableModel) subTable.getModel();

        try{
            ItemEntry item = BarcodeInterface.getProduct(barcode); 
            boolean itemExists = false;
            
            for(int i=0; i<subItems.size(); i++){
                if(subItems.get(i).getBarcode().equals(barcode)){ //old item, so add quantity
                    itemExists = true;
                    subItems.get(i).setQuantity(subItems.get(i).getQuantity()+1);
                    displayClassesTableModel.setValueAt(subItems.get(i).getQuantity(), i, 2);
                }
            }
            
            if(!itemExists){ //new item
                subItems.add(item);
                Object[] rowData = new Object[4];
                
                try {
                    // Load the image from the URL or file path
                    URL imageUrl = new URL(item.getImageUrl()); // Assuming getImageUrl() returns a valid URL
                    ImageIcon imageIcon = new ImageIcon(imageUrl);
                    rowData[0] = imageIcon;  // Set the ImageIcon in rowData[0]
                } catch (Exception e) {
                    rowData[0] = null; // In case the image URL is invalid or there's an error
                    e.printStackTrace();
                }
                ArrayList<String> cats = ItemQueries.getCategoriesForItem(item.getBarcode());

                rowData[1] = item.getName();
                rowData[2] = item.getQuantity();
                String str = "";
                for(String s: cats){
                    str+=s+" ";
                }
                rowData[3] = str;
                displayClassesTableModel.addRow(rowData);
            }
            
            
            subTable.getColumnModel().getColumn(0).setCellRenderer(new ImageRenderer());
            
            subBarcodeBox.setText("");
            
        } catch(Exception e){
        
        }
    }//GEN-LAST:event_subBarcodeBoxActionPerformed

    private void But_Add_ItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_But_Add_ItemsActionPerformed
        for(ItemEntry i : newItems){
            ItemQueries.addItem(i);
        }
        newItems = new ArrayList<ItemEntry>();
        DefaultTableModel displayClassesTableModel = (DefaultTableModel) addTable.getModel();
        displayClassesTableModel.setRowCount(0);

        
    }//GEN-LAST:event_But_Add_ItemsActionPerformed

    private void But_Remove_ItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_But_Remove_ItemsActionPerformed
        for(ItemEntry i : subItems){
            ItemEntry old = ItemQueries.getItemByBarcode(i.getBarcode());
            if(old!=null){
                old.setQuantity(old.getQuantity()-i.getQuantity());
            }
            
            ItemQueries.updateItem(old);
        }
        subItems = new ArrayList<ItemEntry>();
        DefaultTableModel displayClassesTableModel = (DefaultTableModel) subTable.getModel();
        displayClassesTableModel.setRowCount(0);
    }//GEN-LAST:event_But_Remove_ItemsActionPerformed

    private void Inv_Search_BoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Inv_Search_BoxKeyPressed
        popInvTable();
    }//GEN-LAST:event_Inv_Search_BoxKeyPressed

    private void Org_Filter_Search_BoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Org_Filter_Search_BoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Org_Filter_Search_BoxActionPerformed

    private void But_Add_FilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_But_Add_FilterActionPerformed
       Object s = orgFilterAddFilterCmbo.getSelectedItem();
        String filt = (String)s;
        if(filt.equals("None")){
            try{
                String newFilter = Create_Filter_Text_Box.getText();
                CategoryQueries.addCategory(newFilter);
                rebuildFilterBoxes();
                 int row = Org_Filter_Item_Table.getSelectedRow();
                 
                 if(row>-1){
                     ItemEntry itm = orgSelected;
                     
                     ItemQueries.addItemToCategory(itm.getBarcode(), newFilter);
                     Object rowData[] = {newFilter};
                     DefaultTableModel displayClassesTableModel = (DefaultTableModel) Org_Filter_Filters_Table.getModel();

                     displayClassesTableModel.addRow(rowData);
                 }
                
            }catch(Exception e){}
        }else{
            int row = Org_Filter_Item_Table.getSelectedRow();
                 if(row>-1){
                     DefaultTableModel itemTableGett = (DefaultTableModel) Org_Filter_Item_Table.getModel();
                     ItemEntry itm = ItemQueries.getItemByName((String)itemTableGett.getValueAt(row, 1));
                     
                     ItemQueries.addItemToCategory(itm.getBarcode(), filt);
                     Object rowData[] = {filt};
                     DefaultTableModel displayClassesTableModel = (DefaultTableModel) Org_Filter_Filters_Table.getModel();

                     displayClassesTableModel.addRow(rowData);
                 }
        
        }
        Create_Filter_Text_Box.setText("");
    }//GEN-LAST:event_But_Add_FilterActionPerformed

    private void But_Org_Filter_Remove_Filter_ItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_But_Org_Filter_Remove_Filter_ItemActionPerformed
       int row = Org_Filter_Filters_Table.getSelectedRow();
       DefaultTableModel displayClassesTableModel = (DefaultTableModel) Org_Filter_Filters_Table.getModel();
       if(row>-1){
           String gilt =(String) displayClassesTableModel.getValueAt(row, 0);
           ItemQueries.removeItemFromCategory(orgSelected.getBarcode(), gilt);
           displayClassesTableModel.removeRow(row);
       }
    }//GEN-LAST:event_But_Org_Filter_Remove_Filter_ItemActionPerformed

    private void Org_Filter_Search_BoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Org_Filter_Search_BoxKeyPressed
        String search = Org_Filter_Search_Box.getText();
        Object s = orgFilterFilterCmbo.getSelectedItem();
        String filt = (String)s;
        ArrayList<ItemEntry> results;
        if(filt.equals("None")){
            results = ItemQueries.searchItemsByName(search);
        }else{
            results = ItemQueries.searchItems(search, filt);
        }
        popOrgItemTable(results);
    }//GEN-LAST:event_Org_Filter_Search_BoxKeyPressed

    private void Org_Filter_Item_TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Org_Filter_Item_TableMouseClicked
       int row = Org_Filter_Item_Table.getSelectedRow();
       DefaultTableModel displayClassesTableModel = (DefaultTableModel) Org_Filter_Filters_Table.getModel();
       displayClassesTableModel.setRowCount(0);
       
       if(row>-1){
            DefaultTableModel itemTableGett = (DefaultTableModel) Org_Filter_Item_Table.getModel();
            ItemEntry itm = ItemQueries.getItemByName((String)itemTableGett.getValueAt(row, 1));
            orgSelected = itm;

            ArrayList<String> str = ItemQueries.getCategoriesForItem(itm.getBarcode());
            int j = 0;
            for (String i: str){
                Object rowData[] = {i};
                displayClassesTableModel.addRow(rowData);
                //displayClassesTableModel.setValueAt(cat, j, 0);
                j++;
            }
       }
    }//GEN-LAST:event_Org_Filter_Item_TableMouseClicked

    private void But_Org_Customize_ToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_But_Org_Customize_ToggleActionPerformed
        Org_Filter_Pannel.setVisible(false);
        Org_Unpack_Pannel.setVisible(false);
        Org_Select_Pannel.setVisible(false);
        Org_Customize_Pannel.setVisible(true);
    }//GEN-LAST:event_But_Org_Customize_ToggleActionPerformed

    private void But_Org_Filter_ToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_But_Org_Filter_ToggleActionPerformed
        Org_Filter_Pannel.setVisible(true);
        Org_Unpack_Pannel.setVisible(false);
        Org_Select_Pannel.setVisible(false);
        Org_Customize_Pannel.setVisible(false);
    }//GEN-LAST:event_But_Org_Filter_ToggleActionPerformed

    private void But_Org_Unpack_ToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_But_Org_Unpack_ToggleActionPerformed
        Org_Filter_Pannel.setVisible(false);
        Org_Select_Pannel.setVisible(false);
        Org_Unpack_Pannel.setVisible(true);
        Org_Customize_Pannel.setVisible(false);
    }//GEN-LAST:event_But_Org_Unpack_ToggleActionPerformed

    private void invFilterCmboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invFilterCmboActionPerformed
        popInvTable();
    }//GEN-LAST:event_invFilterCmboActionPerformed

    private void orgFilterFilterCmboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orgFilterFilterCmboActionPerformed
       String search = Org_Filter_Search_Box.getText();
        Object s = orgFilterFilterCmbo.getSelectedItem();
        String filt = (String)s;
        ArrayList<ItemEntry> results;
        if(filt.equals("None")){
            results = ItemQueries.searchItemsByName(search);
        }else{
            results = ItemQueries.searchItems(search, filt);
        }
        popOrgItemTable(results);
    }//GEN-LAST:event_orgFilterFilterCmboActionPerformed

    private void But_Org_Filter_Remove_Filter_SystemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_But_Org_Filter_Remove_Filter_SystemActionPerformed
        String s = (String) orgFilterDeleteFilterCmbo.getSelectedItem();
        if(!s.equals("None")){
            CategoryQueries.removeCategory(s);
            rebuildFilterBoxes();
        }

    }//GEN-LAST:event_But_Org_Filter_Remove_Filter_SystemActionPerformed

    private void Shopping_Generated_Search_BoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Shopping_Generated_Search_BoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Shopping_Generated_Search_BoxActionPerformed

    private void shopSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shopSaveBtnActionPerformed
        DefaultTableModel model = (DefaultTableModel) shoppingEditTable.getModel();

        for (int row = 0; row < model.getRowCount(); row++) {
            Integer value = (Integer)model.getValueAt(row, 3); 
            System.out.println(value);
            if (value < 0){value = 0;}
            ItemEntry itm = ItemQueries.getItemByName((String)model.getValueAt(row, 1));
            ItemQueries.updateDesitedAmt(itm.getBarcode(), value);
        }
    }//GEN-LAST:event_shopSaveBtnActionPerformed

    private void Shopping_Edit_Search_BoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Shopping_Edit_Search_BoxKeyPressed
        popShopEditTable();
    }//GEN-LAST:event_Shopping_Edit_Search_BoxKeyPressed

    private void Shopping_Edit_FilterCmboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Shopping_Edit_FilterCmboActionPerformed
        popShopEditTable();
    }//GEN-LAST:event_Shopping_Edit_FilterCmboActionPerformed

    private void Shopping_Generated_Search_BoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Shopping_Generated_Search_BoxKeyPressed
       popShopGenTable();
    }//GEN-LAST:event_Shopping_Generated_Search_BoxKeyPressed

    private void Shopping_GeneratedFilterCmbo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Shopping_GeneratedFilterCmbo1ActionPerformed
        popShopGenTable();
    }//GEN-LAST:event_Shopping_GeneratedFilterCmbo1ActionPerformed

    private void But_Inv_ExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_But_Inv_ExportActionPerformed
        List<List<Object>> toWrite = new ArrayList<>();
        DefaultTableModel model = (DefaultTableModel) invTable.getModel();
        for(int i = 0; i<invTable.getRowCount(); i++){
           List<Object> line = new ArrayList<>();
           ItemEntry itm = ItemQueries.getItemByName((String)model.getValueAt(i, 1));
           line.add(itm.getName());
           line.add(itm.getBrands());
           line.add(itm.getQuantity());
           toWrite.add(line);
       }
        
        try{
        writeToSheet(getSheetsService(), "1be1eaIzrXCHs7HBkhr41Gq1yv5I7v-mJ8lXLVPIaL08" , "Inventory!A2", toWrite);
        }catch(Exception e){}
    }//GEN-LAST:event_But_Inv_ExportActionPerformed

    private void popShopEditTable(){
    DefaultTableModel displayClassesTableModel = (DefaultTableModel) shoppingEditTable.getModel();
    displayClassesTableModel.setRowCount(0);
    
    String search = Shopping_Edit_Search_Box.getText();
    String b = (String) Shopping_Edit_FilterCmbo.getSelectedItem();
    ArrayList<ItemEntry> results;
    if(b.equals("None")){
         results = ItemQueries.searchItemsByName(search);
    }else{
        results = ItemQueries.searchItems(search, b);
    }
    
    
    for (ItemEntry i : results) {
        Object[] rowData = new Object[4];
        try {
            URL imageUrl = new URL(i.getImageUrl()); // Assuming getImageUrl() returns a valid URL
            ImageIcon imageIcon = new ImageIcon(imageUrl);
            rowData[0] = imageIcon;
        } catch (Exception e) {
            rowData[0] = null; // In case the image URL is invalid or there's an error
            e.printStackTrace();
        }
        
        rowData[1] = i.getName();
        ArrayList<String> cats = ItemQueries.getCategoriesForItem(i.getBarcode());

            String str = "";
                for(String s: cats){
                    str+=s+" ";
                }
                rowData[2] = str;
        rowData[3] = i.getDesiredQnty(); // Default value for spinner

        displayClassesTableModel.addRow(rowData);
    }

    shoppingEditTable.getColumnModel().getColumn(0).setCellRenderer(new ImageRenderer());
    
    // Set Spinner as both Editor and Renderer
    shoppingEditTable.getColumnModel().getColumn(3).setCellEditor(new SpinnerEditor());
    shoppingEditTable.getColumnModel().getColumn(3).setCellRenderer(new SpinnerRenderer());
    
    }
    private void popShopGenTable(){
        String search = Shopping_Generated_Search_Box.getText();
        String b = (String) Shopping_GeneratedFilterCmbo1.getSelectedItem();
        ArrayList<ItemEntry> results2;
        if(b.equals("None")){
            results2 = ItemQueries.searchItemsByName(search);
        }else{
            results2 = ItemQueries.searchItems(search, b);
        }
        ArrayList<ItemEntry> results = new ArrayList<ItemEntry>();
        
        for(ItemEntry i: results2){
            if(i.getQuantity()<i.getDesiredQnty()){
                results.add(i);
            }
        }
        
        List<List<Object>> toWrite = new ArrayList<>();
        
        DefaultTableModel displayClassesTableModel = (DefaultTableModel) shoppingGenTable.getModel();
        displayClassesTableModel.setRowCount(0);
        for(ItemEntry i: results){
            List<Object> line = new ArrayList<>();
            Object[] rowData = new Object[4];
            try {
                    // Load the image from the URL or file path
                    URL imageUrl = new URL(i.getImageUrl()); // Assuming getImageUrl() returns a valid URL
                    ImageIcon imageIcon = new ImageIcon(imageUrl);
                    rowData[0] = imageIcon;  // Set the ImageIcon in rowData[0]
                } catch (Exception e) {
                    rowData[0] = null; // In case the image URL is invalid or there's an error
                    e.printStackTrace();
                }
            
            rowData[1] = i.getName();
            line.add(i.getName());
            rowData[3] = i.getDesiredQnty()-i.getQuantity();
            line.add(i.getBrands());
            line.add(String.valueOf(i.getDesiredQnty()-i.getQuantity()));
            
            ArrayList<String> cats = ItemQueries.getCategoriesForItem(i.getBarcode());
            
            String str = "";
                for(String s: cats){
                    str+=s+" ";
                }
                rowData[2] = str;
                
            displayClassesTableModel.addRow(rowData);
            toWrite.add(line);
            int rowCount = results.size();
            
            
        }
        try{
            int colCount = 4; // Assuming 4 columns (adjust if needed)
            List<List<Object>> blankRows = new ArrayList<>();

            // Adding blank rows to clear out excess data
            for (int f = displayClassesTableModel.getRowCount(); f < displayClassesTableModel.getRowCount() + 20; f++) { // Clear at least 20 extra rows
                List<Object> blankRow = new ArrayList<>();
                for (int j = 0; j < colCount; j++) {
                    blankRow.add(""); // Empty cell
                }
                blankRows.add(blankRow);
            }

            toWrite.addAll(blankRows);
        writeToSheet(getSheetsService(), "1be1eaIzrXCHs7HBkhr41Gq1yv5I7v-mJ8lXLVPIaL08", "Shopping List!A2", toWrite);
        }catch(Exception e){}
        shoppingGenTable.getColumnModel().getColumn(0).setCellRenderer(new ImageRenderer());
    }
    
    private void popInvTable(){
        String search = Inv_Search_Box.getText();
        String b = (String) invFilterCmbo.getSelectedItem();
        ArrayList<ItemEntry> results;
        if(b.equals("None")){
            results = ItemQueries.searchItemsByName(search);
        }else{
            results = ItemQueries.searchItems(search, b);
        }
        
        DefaultTableModel displayClassesTableModel = (DefaultTableModel) invTable.getModel();
        displayClassesTableModel.setRowCount(0);
        for(ItemEntry i: results){
            Object[] rowData = new Object[4];
            try {
                    // Load the image from the URL or file path
                    URL imageUrl = new URL(i.getImageUrl()); // Assuming getImageUrl() returns a valid URL
                    ImageIcon imageIcon = new ImageIcon(imageUrl);
                    rowData[0] = imageIcon;  // Set the ImageIcon in rowData[0]
                } catch (Exception e) {
                    rowData[0] = null; // In case the image URL is invalid or there's an error
                    e.printStackTrace();
                }
            
            rowData[1] = i.getName();
            rowData[2] = i.getQuantity();
            ArrayList<String> cats = ItemQueries.getCategoriesForItem(i.getBarcode());

            String str = "";
                for(String s: cats){
                    str+=s+" ";
                }
                rowData[3] = str;
                
            displayClassesTableModel.addRow(rowData);

            
        }
        invTable.getColumnModel().getColumn(0).setCellRenderer(new ImageRenderer());
    }
    
    /**
     * @param args the command line arguments
     */
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Add_Barcode_Lable;
    private javax.swing.JPanel Add_Pannel;
    private javax.swing.JScrollPane Add_Table;
    private javax.swing.JPanel Base_Pannel;
    private javax.swing.JToggleButton But_Add;
    private javax.swing.JButton But_Add_Filter;
    private javax.swing.JButton But_Add_Items;
    private javax.swing.JButton But_Inv_Export;
    private javax.swing.JToggleButton But_Inventory;
    private javax.swing.JToggleButton But_Org;
    private javax.swing.JToggleButton But_Org_Customize_Toggle;
    private javax.swing.JButton But_Org_Filter_Remove_Filter_Item;
    private javax.swing.JButton But_Org_Filter_Remove_Filter_System;
    private javax.swing.JToggleButton But_Org_Filter_Toggle;
    private javax.swing.JButton But_Org_Unpack_Submit_Number;
    private javax.swing.JToggleButton But_Org_Unpack_Toggle;
    private javax.swing.JButton But_Remove_Items;
    private javax.swing.JToggleButton But_Shopping_List;
    private javax.swing.JToggleButton But_Shopping_List_Edit;
    private javax.swing.JToggleButton But_Shopping_List_Generate;
    private javax.swing.JToggleButton But_Sub;
    private javax.swing.JTextField Create_Filter_Text_Box;
    private javax.swing.JLabel Inv_Filter_Lable;
    private javax.swing.JTextField Inv_Search_Box;
    private javax.swing.JLabel Inv_Search_Lable;
    private javax.swing.JPanel Inventory_Pannel;
    private javax.swing.JPanel Main_Pannel;
    private javax.swing.JPanel Org_Card_Pannel;
    private javax.swing.JPanel Org_Customize_Pannel;
    private javax.swing.JTable Org_Filter_Filters_Table;
    private javax.swing.JTable Org_Filter_Item_Table;
    private javax.swing.JLabel Org_Filter_Label1;
    private javax.swing.JLabel Org_Filter_Label2;
    private javax.swing.JLabel Org_Filter_Label4;
    private javax.swing.JLabel Org_Filter_Label5;
    private javax.swing.JLabel Org_Filter_Label6;
    private javax.swing.JLabel Org_Filter_Label7;
    private javax.swing.JLabel Org_Filter_Label8;
    private javax.swing.JPanel Org_Filter_Pannel;
    private javax.swing.JTextField Org_Filter_Search_Box;
    private javax.swing.JLabel Org_Filter_Search_Label;
    private javax.swing.JPanel Org_Pannel;
    private javax.swing.JPanel Org_Select_Pannel;
    private javax.swing.JTextField Org_Unpack_Barcode_Input;
    private javax.swing.JLabel Org_Unpack_Master_Label;
    private javax.swing.JLabel Org_Unpack_Number_Label;
    private javax.swing.JSpinner Org_Unpack_Number_Select;
    private javax.swing.JPanel Org_Unpack_Pannel;
    private javax.swing.JTable Org_Unpack_Table;
    private javax.swing.JPanel Please_Select_Panel;
    private javax.swing.JComboBox<String> Shopping_Edit_FilterCmbo;
    private javax.swing.JLabel Shopping_Edit_Filter_Label;
    private javax.swing.JTextField Shopping_Edit_Search_Box;
    private javax.swing.JLabel Shopping_Edit_Search_Label;
    private javax.swing.JScrollPane Shopping_Edit_Table;
    private javax.swing.JComboBox<String> Shopping_GeneratedFilterCmbo1;
    private javax.swing.JLabel Shopping_Generated_Filter_Lable1;
    private javax.swing.JTextField Shopping_Generated_Search_Box;
    private javax.swing.JLabel Shopping_Generated_Search_Lable;
    private javax.swing.JScrollPane Shopping_Generated_Table;
    private javax.swing.JPanel Shopping_List_Card_Pannel;
    private javax.swing.JPanel Shopping_List_Edit_Pannel;
    private javax.swing.JPanel Shopping_List_Generate_Pannel;
    private javax.swing.JPanel Shopping_List_Pannel;
    private javax.swing.JPanel Shopping_Select_Pannel;
    private javax.swing.JLabel Sub_Barcode_Lable;
    private javax.swing.JPanel Sub_Pannel;
    private javax.swing.JScrollPane Sub_Table;
    private javax.swing.JTextField addBarcodeBox;
    private javax.swing.JTable addTable;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JComboBox<String> invFilterCmbo;
    private javax.swing.JScrollPane invScroll;
    private javax.swing.JTable invTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox<String> orgFilterAddFilterCmbo;
    private javax.swing.JComboBox<String> orgFilterDeleteFilterCmbo;
    private javax.swing.JComboBox<String> orgFilterFilterCmbo;
    private javax.swing.JButton shopSaveBtn;
    private javax.swing.JTable shoppingEditTable;
    private javax.swing.JTable shoppingGenTable;
    private javax.swing.JTextField subBarcodeBox;
    private javax.swing.JTable subTable;
    // End of variables declaration//GEN-END:variables
}
